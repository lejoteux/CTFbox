#!/bin/bash
# vim:ft=bash ts=4 sw=4 sts=4 et fenc=utf-8

set -eu -o pipefail

CTF_TOOLS_ROOT="$(dirname "${BASH_SOURCE[0]}")/.."


function usage()
{
    cat <<END
usage: $(basename $0) [-sv] (list|setup|install|uninstall|bin|search) tool

Options:
    -s      allow running things with sudo (i.e., to install debs)
    -n      "nice" the installer to reduce background load
    -v      verbose mode. print log while installing
    -f      force certain actions (such as installing over an installed tool)
    tool    name of the tool. if "all", does the action on all (installed) tools

Actions:
    setup       set up the environment
    list        list all tools (-i: only installed, -u: only uninstalled)
    install     installs a tool
    uninstall   uninstalls a tool
    reinstall   reinstalls a tool
    upgrade     upgrades a tool (use "all" to do a full upgrade of installed tools)
    bin         re-links tool binaries into CTFbox/bin
    search      search description and name of tools

END
}


function tool_log()
{
    echo "$(tput setaf 4 2>/dev/null)TOOLS | $TOOL |$(tput sgr0 2>/dev/null) $@"
}


function is_tool_installed()
{
    git status --ignored "$1" | egrep -q 'Untracked|Ignored'
}


function base_build_setup()
{
    # Install zsh environment.
    "$PWD/zshenv/install"

    # CTFbox: PATH setup
    MAGIC="# PATH setup"

    if ! grep "$MAGIC" "$f" >/dev/null 2>&1; then
        cat >> "$f" << EOF
$MAGIC
export PATH="$PWD/bin:\$PATH"
EOF
    fi

    # Create the python virtualenv
    "$PWD/bin/pip" freeze 2>&1 > /dev/null
}


function full_upgrade()
{
	TOOL="FULL-UPGRADE" tool_log "Upgrading all installed tools!"
	succ=0
	fail=0
	declare -a failed
	installed=$($0 list -i)
	TOOL="FULL-UPGRADE" tool_log "Upgrading tools: $installed"
	for t in $installed
	do
		TOOL="FULL-UPGRADE" tool_log "Upgrading tool $t"
		if $0 upgrade $t; then
			succ=$((succ+1))
		else
			fail=$((fail+1))
			failed[${#failed[@]}]="$t"
		fi
	done
	TOOL="FULL-UPGRADE" tool_log "failed to upgrade ${failed[@]}"
	TOOL="FULL-UPGRADE" tool_log "tool full-upgrade stats - sucess=$succ failed=$fail"
}


function verify_tool_sanity()
{
    if [[ -z "$TOOL" ]]; then
        TOOL="$ACTION" tool_log "must provide at least one tool for $ACTION"
        usage
        exit 1
    fi

    if [[ "$TOOL" == "all" ]]; then
        TOOL="$ACTION" tool_log "can't handle \"all\" magic tool directly!" \
            "This is probably a bug you should report."
        usage
        exit 1
    fi

    if [[ ! -d "$CTF_TOOLS_ROOT/$TOOL" ]]; then
        TOOL="$ACTION" tool_log "invalid tool $TOOL"
        exit 1
    fi
}


if [[ $# -eq 0 ]]; then
    usage
    exit 0
fi


while [[ $1 == -* ]]
do
    case $1 in
        -s)
            export ALLOW_SUDO=1
            ;;
        -n)
            export NICE_LEVEL=10
            ;;
        -f)
            export FORCE=1
            ;;
        -v)
            export VERBOSE_OUTPUT=1
            ;;
        *)
            usage
            exit
            ;;
    esac
    shift
done

[[ -z ${ALLOW_SUDO+x} ]] && export ALLOW_SUDO=0
[[ -z ${FORCE+x} ]] && export FORCE=0
[[ -z ${VERBOSE_OUTPUT+x} ]] && export VERBOSE_OUTPUT=0
[[ -z ${NICE_LEVEL+x} ]] && export NICE_LEVEL=0
export EXPECTFAIL=${EXPECTFAIL:-0}

if [[ $# -ge 1 ]]; then
	ACTION="$1"
fi
if [[ $# -eq 2 ]]; then
	TOOL="$2"
else
	TOOL=""
fi

# handle the special all tool
if [[ "$TOOL" == "all" ]]
then
	case $ACTION in
		install)
			for t in $($0 list)
			do
				$0 $ACTION $t
			done
			exit 0
			;;
		bin | uninstall | reinstall)
			for t in $($0 list -i)
			do
				$0 $ACTION $t
			done
			exit 0
			;;
		upgrade)
			full_upgrade
			exit 0
			;;
		*)
			TOOL="" tool_log "action $ACTION cannot handle the special \"all\" tool"
			usage
			exit 1
			;;
	esac
fi


cd $(dirname "${BASH_SOURCE[0]}")/..

case $ACTION in
	setup)
        base_build_setup
		;;
	list)
		for t in *
        do
			[ ! -e "$t/install" ] && continue

			if [[ "${2:-}" == "" ]]; then
				echo "$t"
			else
				if is_tool_installed "$t"; then
					if [[ "$2" == "-i" ]]; then
						echo "$t"
					fi
				else
					if [[ "$2" == "-u" ]]; then
						echo "$t"
					fi
				fi
			fi
		done
		;;
	bin)
		verify_tool_sanity
		cd bin
		if [ -d ../$TOOL/bin ]; then
			ln -sf ../$TOOL/bin/* .
			tool_log "bin symlinks updated"
		fi
		cd ..
		;;
    install)
        verify_tool_sanity
        cd $TOOL
        if [ "$FORCE" -eq 0 ] && is_tool_installed "."; then
            tool_log "appears to be installed already. Uninstall first?"
            exit 0
        fi

		# the first line in all install and uninstall scripts should have the -e flag, otherwise fail
		if [ $(for i in install* uninstall test; do if [ -e "$i" ]; then head -1 "$i"; fi; done | sort | uniq | grep -v '^#!/bin/bash -ex$' | wc -l) -ne 0 ];
		then
			tool_log "not all install/uninstall/test scripts start with '#!/bin/bash -ex', which is a must for accurate testing."
			exit 1
		fi

		tool_log "starting install, logging to $PWD/install.log"
		rm -f install.log

	    # first get distri specific dependencies
        INSTALL_DEP="install-dep"
        if [[ $(find . -name "INSTALL_DEP" | wc -l) -ge 1 ]]; then
            if [[ -x "$INSTALL_DEP" && "$ALLOW_SUDO" -eq 1 ]]; then
                set +e
                if [[ "$VERBOSE_OUTPUT" -eq 1 ]]; then
                    sudo "$INSTALL_DEP" 2>&1 | tee -a install.log
                else
                    sudo "$INSTALL_DEP" >> install.log 2>&1
                fi
                INSTALL_FAILED=$?
                set -e

                if [[ "$INSTALL_FAILED" -eq 0 ]]; then
                    tool_log "system dependencies installed"
                else
                    tool_log "INSTALL FAILED: $INSTALL_DEP failed to install dependencies"
                    cat install.log >&2
                    exit 1
                fi
            else
                tool_log "Warning: make sure build dependencies are installed!"
            fi
        fi
        
        # execute install script
        set +e
        if [[ "$VERBOSE_OUTPUT" -eq 1 ]]; then
            PATH="$CTF_TOOLS_ROOT/bin/:$PATH" nice -n$NICE_LEVEL ./install 2>&1 | tee -a install.log
        else
            PATH="$CTF_TOOLS_ROOT/bin/:$PATH" nice -n$NICE_LEVEL ./install >> install.log 2>&1
        fi
        INSTALL_FAILED=$?
        set -e

        if [ "$INSTALL_FAILED" -eq 0 ]; then
            tool_log "install finished"
        else
            tool_log "INSTALL FAILED"
            cat install.log >&2
            exit 1
        fi

        cd ..
        $0 bin $TOOL
        ;;
    uninstall)
        verify_tool_sanity
		cd $TOOL

		tool_log "starting uninstall, logging to $PWD/uninstall.log"
		[ -x ./uninstall ] && ./uninstall >> uninstall.log 2>&1
		git clean -dffx . >/dev/null 2>&1
		tool_log "uninstall finished"

		cd ..
		;;
	upgrade)
		if [[ "$TOOL" == "" ]]; then
			full_upgrade
			exit 0
		fi
		verify_tool_sanity
		cd $TOOL
		if [ -x ./upgrade ]
		then
			./upgrade
			tool_log "upgrade complete!"
		else
			tool_log "no upgrade script -- reinstalling"
			$0 uninstall $TOOL
			$0 install $TOOL
		fi
		;;
	reinstall)
		$0 uninstall $TOOL
		$0 install $TOOL
		;;
	search)
		cat README.md | grep "<\!--tool-->" | sed "s/<\!--[^-]*-->//g" | grep -i "$TOOL"
		;;
	test)
		if [ "$FORCE" -eq 0 ] && ! cat README.md | grep "<\!--tool-->" | grep "| \[$TOOL\](" | grep -q -- "--test--"
		then
			tool_log "Tests not enabled."
			if [ "$EXPECTFAIL" -eq "1" ]; then exit 1; fi
		else
			if (
			if ! $0 install $TOOL; then exit 1; fi

			cd $TOOL || exit 1
			if [ -f ./test ]
			then
				tool_log "Running test script."
				if ! ./test
				then
					tool_log "$TOOL test failed!"
					exit 1
				fi
				tool_log "test script succeeded!"
			else
				tool_log "Install succeeded. No test script!"
			fi
			exit 0
			); 
			then
				if [ "$EXPECTFAIL" -eq "1" ]; then exit 1; else exit 0; fi
			else
				if [ "$EXPECTFAIL" -eq "1" ]; then exit 0; else exit 1; fi
			fi
		fi
		;;
	*)
		echo "TOOLS | ERROR | unknown action $ACTION"
		usage
		exit 1
		;;
esac
